#!/usr/bin/env bash

# ARG_HELP([Script for building FreeBSD VM images from source])
# ARG_VERSION_AUTO([0.0.1])
# ARG_OPTIONAL_BOOLEAN([world],[w],[Execute buildworld even if world build exists])
# ARG_OPTIONAL_SINGLE([vm-name],[n],[Configure hostname for resulting VM],[CADETS-vm])
# ARG_OPTIONAL_BOOLEAN([router-vm],[r],[Create image for router VM])
# ARG_OPTIONAL_BOOLEAN([kernel],[k],[Execute buildkernel even if kernel build exists])
# ARG_USE_ENV([KERNCONF],[CADETS],[The kernel configuration to use])
# ARG_USE_ENV([TARGET],[amd64],[Build target machine])
# ARG_USE_ENV([TARGET_ARCH],[amd64],[Build target architecture])
# ARG_USE_ENV([OBJ_DIR],[/usr/obj/usr/src],[Points to src root dir in build object directory hierarchy])
# ARG_USE_ENV([MAKE_NUMCPUS],[32],[Parallelism for make build jobs])
# ARG_USE_ENV([VM_IMG_DEST],[/usr/freebsd-root],[Destination for VM image])
# ARG_USE_ENV([VM_ROOT_SIZE],[5G],[VM root partition size])
# ARG_USE_ENV([VM_SWAP_SIZE],[1G],[VM swap partition size])
# ARG_USE_ENV([SWAP_ON],[true],[Set to false if no swap is desired])
# ARG_POSITIONAL_DOUBLEDASH([])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Setting environmental variables

die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}


begins_with_short_option()
{
  local first_option all_short_options='hvwnrk'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_world="off"
_arg_vm_name="CADETS-vm"
_arg_router_vm="off"
_arg_kernel="off"


print_help()
{
  printf '%s\n' "Script for building FreeBSD VM images from source"
  printf 'Usage: %s [-h|--help] [-v|--version] [-w|--(no-)world] [-n|--vm-name <arg>] [-r|--(no-)router-vm] [-k|--(no-)kernel]\n' "$0"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' "-v, --version: Prints version"
  printf '\t%s\n' "-w, --world, --no-world: Execute buildworld even if world build exists (off by default)"
  printf '\t%s\n' "-n, --vm-name: Configure hostname for resulting VM (default: 'CADETS-vm')"
  printf '\t%s\n' "-r, --router-vm, --no-router-vm: Create image for router VM (off by default)"
  printf '\t%s\n' "-k, --kernel, --no-kernel: Execute buildkernel even if kernel build exists (off by default)"
printf '\nEnvironment variables that are supported:\n'
printf '\t%s\n' "KERNCONF: The kernel configuration to use. (default: 'CADETS')"
printf '\t%s\n' "TARGET: Build target machine. (default: 'amd64')"
printf '\t%s\n' "TARGET_ARCH: Build target architecture. (default: 'amd64')"
printf '\t%s\n' "OBJ_DIR: Points to src root dir in build object directory hierarchy. (default: '/usr/obj/usr/src')"
printf '\t%s\n' "MAKE_NUMCPUS: Parallelism for make build jobs. (default: '32')"
printf '\t%s\n' "VM_IMG_DEST: Destination for VM image. (default: '/usr/freebsd-root')"
printf '\t%s\n' "VM_ROOT_SIZE: VM root partition size. (default: '5G')"
printf '\t%s\n' "VM_SWAP_SIZE: VM swap partition size. (default: '1G')"
printf '\t%s\n' "SWAP_ON: Set to false if no swap is desired. (default: 'true')"

}


parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      -v|--version)
        printf '%s %s\n\n%s\n' "build-vm-img-parsing.sh" "0.0.1" 'Script for building FreeBSD VM images from source'
        exit 0
        ;;
      -v*)
        printf '%s %s\n\n%s\n' "build-vm-img-parsing.sh" "0.0.1" 'Script for building FreeBSD VM images from source'
        exit 0
        ;;
      -w|--no-world|--world)
        _arg_world="on"
        test "${1:0:5}" = "--no-" && _arg_world="off"
        ;;
      -w*)
        _arg_world="on"
        _next="${_key##-w}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-w" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -n|--vm-name)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_vm_name="$2"
        shift
        ;;
      --vm-name=*)
        _arg_vm_name="${_key##--vm-name=}"
        ;;
      -n*)
        _arg_vm_name="${_key##-n}"
        ;;
      -r|--no-router-vm|--router-vm)
        _arg_router_vm="on"
        test "${1:0:5}" = "--no-" && _arg_router_vm="off"
        ;;
      -r*)
        _arg_router_vm="on"
        _next="${_key##-r}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -k|--no-kernel|--kernel)
        _arg_kernel="on"
        test "${1:0:5}" = "--no-" && _arg_kernel="off"
        ;;
      -k*)
        _arg_kernel="on"
        _next="${_key##-k}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-k" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash
test -n "$KERNCONF" || KERNCONF="CADETS"

test -n "$TARGET" || TARGET="amd64"

test -n "$TARGET_ARCH" || TARGET_ARCH="amd64"

test -n "$OBJ_DIR" || OBJ_DIR="/usr/obj/usr/src"

test -n "$MAKE_NUMCPUS" || MAKE_NUMCPUS="32"

test -n "$VM_IMG_DEST" || VM_IMG_DEST="/usr/freebsd-root"

test -n "$VM_ROOT_SIZE" || VM_ROOT_SIZE="5G"

test -n "$VM_SWAP_SIZE" || VM_SWAP_SIZE="1G"

test -n "$SWAP_ON" || SWAP_ON="true"


### END OF CODE GENERATED BY Argbash (sortof) ### ])
